# Generated by Django 2.2 on 2020-02-13 21:26

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Reception', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='IpPool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(verbose_name='IP地址')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='模板名称')),
                ('path', models.CharField(max_length=255, verbose_name='保存路径')),
            ],
        ),
        migrations.CreateModel(
            name='VCenter',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='vCenter唯一标志')),
                ('ip', models.GenericIPAddressField(unique=True, verbose_name='vCenter服务器IP地址')),
                ('web_url', models.CharField(max_length=255, verbose_name='WebService入口地址')),
                ('user', models.CharField(max_length=150, verbose_name='vCenter管理员账号')),
                ('password', models.CharField(max_length=128, verbose_name='vCenter管理员账号密码')),
            ],
            options={
                'verbose_name_plural': 'VCenter',
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=11)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VirtualPlatform',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='虚拟化平台唯一标志')),
                ('ip', models.GenericIPAddressField(unique=True, verbose_name='vCenter服务器IP地址')),
                ('user', models.CharField(max_length=150, verbose_name='虚拟化平台管理员账号')),
                ('password', models.CharField(max_length=128, verbose_name='虚拟化平台管理员账号密码')),
                ('cpu_amount', models.PositiveIntegerField(verbose_name='CPU数量')),
                ('memory', models.PositiveIntegerField(verbose_name='内存大小(GB)')),
                ('data_store', models.BigIntegerField(verbose_name='数据存储大小(GB)')),
                ('cpu_free', models.PositiveIntegerField(verbose_name='剩余CPU数量')),
                ('memory_free', models.PositiveIntegerField(verbose_name='剩余内存大小(GB)')),
                ('data_store_free', models.PositiveIntegerField(verbose_name='剩余数据存储大小(GB)')),
                ('vCenter_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Xadmin.VCenter', verbose_name='vCenter')),
            ],
            options={
                'verbose_name_plural': '虚拟化平台',
            },
        ),
        migrations.CreateModel(
            name='VirtualMachine',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='虚拟机唯一标志')),
                ('cpu', models.PositiveIntegerField(verbose_name='CPU个数')),
                ('memory', models.PositiveIntegerField(verbose_name='内存大小')),
                ('disk', models.PositiveIntegerField(verbose_name='虚拟磁盘大小')),
                ('ip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Xadmin.IpPool', verbose_name='IP地址')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Reception.User', verbose_name='用户')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Xadmin.Template', verbose_name='虚拟机模板')),
                ('virtual_platform_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Xadmin.VirtualPlatform', verbose_name='虚拟化平台')),
            ],
        ),
        migrations.CreateModel(
            name='Snapshot',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='快照UUID')),
                ('parent', models.UUIDField(verbose_name='父快照UUID')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Xadmin.VirtualMachine', verbose_name='虚拟机')),
            ],
        ),
    ]
